#
# CC65 linker definition, this file drives were segments get mapped to in the addressable space
# see documentation in : https://cc65.github.io/doc/ld65.html#s5 (documentation for cc65 is also in the doc\ folder of this project)
#
#
# NOTE: To use this with the glue logic from the BE specs, simply change the memory ranges defined in the MEMORY section
#
# Using Daryl Rictor's PLD memory decoder from: https://sbc.rictor.org/decoder.html
# See pld/dec1 for code and more documentation
#
# $0000-$01FF - RAM (zero page and stack space)
# $0200-$020F - IO Device #1 (16 bytes) 
# $0210-$021F - IO Device #2 (16 bytes) 
# $0220-$022F - IO Device #3 (16 bytes) 
# $0230-$023F - IO Device #4 (16 bytes) 
# $0240-$02FF - unassigned (can be externally decoded for use) 
# $0300-$7FFF - RAM 
# $8000-$FFFF - ROM 

MEMORY
{
  #Page Zero is always $0000 - $00FF, reserve that space and define it for addressing
  PAGEZERO:  start=$0000, size=$0100, type=rw, define=yes, file="";
  #Stack space is always $0100 - $0100, reserve that space and DO NOT define it for addressing. Is for the MPU
  STACK:     start=$0100, size=$0100, type=rw, define=yes, file="";
  #I/O gets the $02## page, reserve this space and define it for addressing
  VIA1:       start=$0200, size=$0010, type=rw, define=yes, file="";
  ACIA1:      start=$0210, size=$0010, type=rw, define=yes, file="";
  #RAM gets #0300 - $7FFF, reserve this space and define it for addressing
  GEN_RAM:   start=$0300, size=$7D00, type=rw, define=yes, file="";
  #ROM gets $8000 - $FFFF, reserve this space and define it for addressing for code.
  # * define it to write to file
  # * define the FILL and FILLVAL
  #Apparently the eeprom don't get as much wear from 1's?
  ROM:       start=$8000, size=$8000, type=ro, define=yes, fill=yes, fillval=$FF, file=%O;
}

SEGMENTS
{
  CODE:         load=ROM, type=ro, offset=$00, define=yes;
  VIA_CODE:  load=ROM, type=ro, define=yes;
  LCD_CODE:     load=ROM, type=ro, define=yes;
  SPI_CODE:     load=ROM, type=ro, define=yes;
  WOZ_CODE:     load=ROM, type=ro, define=yes;
  UTIL_CODE:    load=ROM, type=ro, define=yes;
  CHAR_CODE:    load=ROM, type=ro, define=yes;  
  VECTORS:      load=ROM, type=ro, offset=$7ffa, optional=yes, define=yes;
  #open space for ram
  LCD_RAM:      load=GEN_RAM, type=rw, define=yes;
  LCD_PAGEZERO: load=PAGEZERO, type=rw, define=yes;
  MAIN_RAM:     load=GEN_RAM, type=rw, define=yes;
  SPI_RAM:      load=GEN_RAM, type=rw, define=yes;
  UTIL_RAM:     load=GEN_RAM, type=rw, define=yes;
  WOZ_RAM:      load=GEN_RAM, type=rw, define=yes;
  WOZ_PAGEZERO: load=PAGEZERO, type=rw, define=yes;
}