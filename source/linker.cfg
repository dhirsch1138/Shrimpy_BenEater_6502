#Adapted from dbuchwald @ https://github.com/dbuchwald/cc65-tools/blob/main/tutorial/03_blink/firmware.cfg
# More segments have been added
# Using the Garth 1 chip glue logic http://wilsonminesco.com/6502primer/addr_decoding.html
#  RAM   $0000-3FFF (16KB)
#  ROM   $8000-FFFF (32KB)
#  VIA   $6000-600F
# 
# With room for up to ten I/O chips (ACIA/VIA) in total if you are bold:
# Garth provides addressing for other propsective chips
#  VIA2  $5000-500F
#  VIA3  $4800-480F
#  ACIA1 $4400-4403
#  ACIA2 $4200, 4204, 4208, 420C
#  ACIA3 $4100, 4104, 4108, 410C
#  (and up to four more I/O ICs could be added) 
MEMORY
{
  #RAM is $0000-$0FFF, split up into page zero, page one (stack), and everything else
  PAGEZERO:  start=$0000, size=$00FF, type=rw, define=yes, file="";
  STACK:     start=$0100, size=$00FF, type=rw, define=yes, file="";
  OPEN_RAM:  start=$0200, size=$3DFF, type=rw, define=yes, file="";
  #IO goes in the middle
  #VIA   $6000-600F
  VIA:       start=$6000, size=$0010, type=rw, define=yes;
  #ROM   $8000-FFFF (all 32KB available)
  #Apparently the eeprom don't get as much wear from 1's?
  ROM:       start=$8000, size=$8000, type=ro, define=yes, fill=yes, fillval=$FF, file=%O;
}

SEGMENTS
{
  CODE:      load=ROM, type=ro, offset=$00, define=yes;
  VIA_SEGMENT:       load=ROM, type=ro, define=yes;
  LCD_SEGMENT:       load=ROM, type=ro, define=yes;
  VECTORS:   load=ROM, type=ro, offset=$7ffa, optional=yes, define=yes;
  #open space for ram
  LCD_RAM: load=OPEN_RAM, type=rw, define=yes;
  LCD_PAGEZERO: load=PAGEZERO, type=rw, define=yes;
}