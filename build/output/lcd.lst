ca65 V2.18 - Debian 2.19-1
Main file   : source/lcd.s
Current file: source/lcd.s

000000r 1               ;PURPOSE - defines the static register references & lcd functions
000000r 1               ;  interface as provided by Ben Eater's videos https://eater.net/6502
000000r 1               ; adaptation from Ben Eater's keyboard.s https://eater.net/downloads/keyboard.s
000000r 1               ;  much of the code is just copied from his work, but there are many changes from me.
000000r 1               ;  rather than try to keep a diff in comments, I would encourage the reader to just diff
000000r 1               ;  this code against the linked code above.
000000r 1               ;
000000r 1               ;NOTE/TODO-
000000r 1               ;  While the LCD doesn't use all of PORTB of the VIA, this code will clobber
000000r 1               ;  DDRB for the non-LCD ports right now (basically presuming they are output)
000000r 1               ;  ideally we should try to preserve the non-LCD DDRB bits.
000000r 1               ;
000000r 1               .export lcd_instruction
000000r 1               .export lcd_print_char
000000r 1               .export lcd_init
000000r 1               
000000r 1               ;allocate addresses & space for LCD variables
000000r 1               .segment "LCD_RAM"
000000r 1               
000000r 1               .segment "LCD_PAGEZERO"
000000r 1               
000000r 1  00           LCD_RS_ENABLE:        .res 1, $00
000001r 1               ;Description: (Boolean) Used to store if RS should be applied to the LCD instruction
000001r 1               ;Values:
000001r 1               ; * False - $00 for non-RS instructions (default)
000001r 1               ; * True - $FF for RS instructions (like printing characters)
000001r 1               ;Note: should be flagged with DEC as needed, always remember that its default state should be $00.
000001r 1               
000001r 1               ;Includes
000001r 1               .include "via.s_imports"
000001r 2               ;PURPOSE - Imports needed symbols defined in via.s
000001r 2               ;
000001r 2               
000001r 2                 .import VIA_DDRB
000001r 2                 .import VIA_PORTB
000001r 2                 .import VIA_DDRA
000001r 2                 .import VIA_PORTA
000001r 2                 .import VIA_T1CL
000001r 2                 .import VIA_T1CH
000001r 2                 .import VIA_T1LL
000001r 2                 .import VIA_T1LH
000001r 2                 .import VIA_T2CL
000001r 2                 .import VIA_T2CH
000001r 2                 .import VIA_SR
000001r 2                 .import VIA_ACR
000001r 2                 .import VIA_PCR
000001r 2                 .import VIA_IFR
000001r 2                 .import VIA_IER
000001r 2                 .import VIA_PANH
000001r 2               
000001r 1               
000001r 1               .segment "LCD_SEGMENT"
000000r 1               
000000r 1               LCD_4BIT_E  = %01000000
000000r 1               LCD_4BIT_RW = %00100000
000000r 1               LCD_4BIT_RS = %00010000
000000r 1               
000000r 1               lcd_init:
000000r 1               ;Description
000000r 1               ;  Inializes the lcd, sets 4 bit mode
000000r 1               ;Arguments
000000r 1               ;  None
000000r 1               ;Preconditions
000000r 1               ;  VIA DDRB must have the LCD's bits set to output
000000r 1               ;Side Effects
000000r 1               ;  LCD is set to accept 4-bit mode
000000r 1               ;  Register A is squished
000000r 1               ;Notes
000000r 1               ;  Does not include a wait for the LCD to be ready for the next command,
000000r 1               ;  presuming that the code invoking the command will be smart enough to wait
000000r 1               ;Todo
000000r 1               ;  Should I be pushing A onto the stack such that this is transparent?
000000r 1  A9 02          lda #%00000010 ; Set 4-bit mode
000002r 1  8D rr rr       sta VIA_PORTB
000005r 1  09 40          ora #LCD_4BIT_E
000007r 1  8D rr rr       sta VIA_PORTB
00000Ar 1  29 0F          and #%00001111
00000Cr 1  8D rr rr       sta VIA_PORTB
00000Fr 1  9C rr rr       stz LCD_RS_ENABLE  ;LCD_RS_ENABLE should be false
000012r 1  60             rts
000013r 1               
000013r 1               lcd_instruction:
000013r 1               ;Description
000013r 1               ;  Sends instruction byte to the LCD
000013r 1               ;Arguments
000013r 1               ;  A - LCD instruction byte
000013r 1               ;Preconditions
000013r 1               ;  LCD is initialized and has its parameters set
000013r 1               ;  LCD is in 4 bit mode
000013r 1               ;Side Effects
000013r 1               ;  Instruction byte is sent to the LCD in 4-bit mode
000013r 1               ;  Register A is squished
000013r 1  20 rr rr       jsr lcd_wait
000016r 1  48             pha
000017r 1  4A             lsr
000018r 1  4A             lsr
000019r 1  4A             lsr
00001Ar 1  4A             lsr            ; Send high 4 bits
00001Br 1  2C rr rr       bit LCD_RS_ENABLE ; enabled RS = $FF
00001Er 1  10 02          bpl lcd_sendhigh ; IF RS is NOT enabled THEN skip applying the RS mask
000020r 1  09 10          ora #LCD_4BIT_RS
000022r 1               lcd_sendhigh:
000022r 1  8D rr rr       sta VIA_PORTB
000025r 1  09 40          ora #LCD_4BIT_E        ; Set E bit to send instruction
000027r 1  8D rr rr       sta VIA_PORTB
00002Ar 1  49 40          eor #LCD_4BIT_E         ; Clear E bit
00002Cr 1  8D rr rr       sta VIA_PORTB
00002Fr 1  68             pla
000030r 1  29 0F          and #%00001111 ; Send low 4 bits
000032r 1  2C rr rr       bit LCD_RS_ENABLE ; enabled RS = $FF
000035r 1  10 02          bpl lcd_sendlow ;IF RS is NOT enabled THEN skip applying the RS mask
000037r 1  09 10          ora #LCD_4BIT_RS
000039r 1               lcd_sendlow:
000039r 1  8D rr rr       sta VIA_PORTB
00003Cr 1  09 40          ora #LCD_4BIT_E         ; Set E bit to send instruction
00003Er 1  8D rr rr       sta VIA_PORTB
000041r 1  49 40          eor #LCD_4BIT_E         ; Clear E bit
000043r 1  8D rr rr       sta VIA_PORTB
000046r 1  2C rr rr       bit LCD_RS_ENABLE ; enabled RS = $FF
000049r 1  10 02          bpl lcd_instruction_done ;IF RS is enabled THEN return to lcd_print_char
00004Br 1  80 06          bra lcd_print_char_done ;jmp
00004Dr 1               lcd_instruction_done:
00004Dr 1  60             rts
00004Er 1               
00004Er 1               lcd_print_char:
00004Er 1               ;Description
00004Er 1               ;  Sends character to LCD
00004Er 1               ;Arguments
00004Er 1               ;  A - character byte to send
00004Er 1               ;Preconditions
00004Er 1               ;  LCD is initialized and has its parameters set
00004Er 1               ;  LCD is in 4 bit mode
00004Er 1               ;Side Effects
00004Er 1               ;  char byte is sent to the LCD in 4-bit mode
00004Er 1               ;  register A is squished
00004Er 1               ;Note
00004Er 1               ;  wrapper for lcd_instruction that also sets the LCD_RS_ENABLE flag
00004Er 1               ;  I know this is trading ROM (which I have a lot of) for RAM
00004Er 1               ;  (which I have less of); but I want practice utilizing RAM
00004Er 1  CE rr rr       dec LCD_RS_ENABLE ;$00 - 1 = $FF (enabled)
000051r 1  80 C0          bra lcd_instruction ;doing a direct jmp to spare the work of stacking subroutines
000053r 1               lcd_print_char_done:
000053r 1  9C rr rr       stz LCD_RS_ENABLE ;$00 (disabled), saves up to three cycles over inc
000056r 1  60             rts
000057r 1               
000057r 1               lcd_wait:
000057r 1               ;Description
000057r 1               ;  Loops until the LCD no longer shows a busy status
000057r 1               ;Arguments
000057r 1               ;  None
000057r 1               ;Preconditions
000057r 1               ;  LCD is initialized and has its parameters set
000057r 1               ;  LCD is in 4 bit mode
000057r 1               ;Side Effects
000057r 1               ;  None
000057r 1  48             pha
000058r 1  A9 F0          lda #%11110000  ; LCD data is input
00005Ar 1  8D rr rr       sta VIA_DDRB
00005Dr 1               lcdbusy:
00005Dr 1  A9 20          lda #LCD_4BIT_RW
00005Fr 1  8D rr rr       sta VIA_PORTB
000062r 1  A9 60          lda #(LCD_4BIT_RW | LCD_4BIT_E)
000064r 1  8D rr rr       sta VIA_PORTB
000067r 1  AD rr rr       lda VIA_PORTB       ; Read high nibble
00006Ar 1  48             pha             ; and put on stack since it has the busy flag
00006Br 1  A9 20          lda #LCD_4BIT_RW
00006Dr 1  8D rr rr       sta VIA_PORTB
000070r 1  A9 60          lda #(LCD_4BIT_RW | LCD_4BIT_E)
000072r 1  8D rr rr       sta VIA_PORTB
000075r 1  AD rr rr       lda VIA_PORTB       ; Read low nibble
000078r 1  68             pla             ; Get high nibble off stack
000079r 1  29 08          and #%00001000
00007Br 1  D0 E0          bne lcdbusy
00007Dr 1                 ; logical break, we aren't busy anymore
00007Dr 1  A9 20          lda #LCD_4BIT_RW
00007Fr 1  8D rr rr       sta VIA_PORTB
000082r 1  A9 FF          lda #%11111111  ; LCD data is output
000084r 1  8D rr rr       sta VIA_DDRB
000087r 1  68             pla
000088r 1  60             rts
000088r 1               
