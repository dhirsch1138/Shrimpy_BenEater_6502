ca65 V2.18 - Debian 2.19-1
Main file   : source/main.s
Current file: source/main.s

000000r 1               ;PURPOSE -  main code file
000000r 1               ;
000000r 1               ; adaptation from Ben Eater's keyboard.s https://eater.net/downloads/keyboard.s
000000r 1               ; mostly I am using it to learn to talk to the lcd in 4-bit mode
000000r 1               ;
000000r 1               ;Includes
000000r 1                 .include "via.s_imports"
000000r 2               ;PURPOSE - Imports needed symbols defined in via.s
000000r 2               ;
000000r 2               
000000r 2                 .import VIA_DDRB
000000r 2                 .import VIA_PORTB
000000r 2                 .import VIA_DDRA
000000r 2                 .import VIA_PORTA
000000r 2                 .import VIA_T1CL
000000r 2                 .import VIA_T1CH
000000r 2                 .import VIA_T1LL
000000r 2                 .import VIA_T1LH
000000r 2                 .import VIA_T2CL
000000r 2                 .import VIA_T2CH
000000r 2                 .import VIA_SR
000000r 2                 .import VIA_ACR
000000r 2                 .import VIA_PCR
000000r 2                 .import VIA_IFR
000000r 2                 .import VIA_IER
000000r 2                 .import VIA_PANH
000000r 2               
000000r 1                 .include "lcd.s_imports"
000000r 2               ;PURPOSE - Imports needed symbols defined in lcd.s
000000r 2               ;
000000r 2               
000000r 2               .import lcd_instruction
000000r 2               .import lcd_print_char
000000r 2               .import lcd_init
000000r 2               .import LCD_RS_ENABLE
000000r 2               
000000r 2               ;Macros
000000r 2               .macro  lcd_print_char_macro     ; Print a character to the lcd
000000r 2                       dec LCD_RS_ENABLE        ;$00 - 1 = $FF (enabled)
000000r 2                       jsr lcd_instruction      ;doing a direct jmp to spare the work of stacking subroutines
000000r 2                       stz LCD_RS_ENABLE        ;$00 (disabled), saves up to three cycles over inc
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1                 .code
000000r 1               
000000r 1               reset:
000000r 1               ;Description
000000r 1               ;  The reset entrypoint for this project
000000r 1               ;Arguments
000000r 1               ;  None (called from reset)
000000r 1               ;Preconditions
000000r 1               ;  Invoked from reset vector
000000r 1               ;Side Effects
000000r 1               ;  * VIA pot B is set to output on all bits
000000r 1               ;  * intializes LCD
000000r 1               ;    * for 4bit
000000r 1               ;    * 2 line display
000000r 1               ;    * 5x8 fonts
000000r 1               ;  * enables LCD
000000r 1               ;    * Dislay on
000000r 1               ;    * cursor on
000000r 1               ;    * blink off
000000r 1               ;  * sets LCD parameters
000000r 1               ;    * increment cursor on update
000000r 1               ;    * shift cursor on update
000000r 1               ;    * do NOT shift display on update
000000r 1               
000000r 1  A2 FF          ldx #$ff
000002r 1  9A             txs
000003r 1  A9 FF          lda #%11111111 ; Set all pins on port B to output
000005r 1  8D rr rr       sta VIA_DDRB
000008r 1  20 rr rr       jsr lcd_init
00000Br 1  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
00000Dr 1  20 rr rr       jsr lcd_instruction
000010r 1  A9 0E          lda #%00001110 ; Display on; cursor on; blink off
000012r 1  20 rr rr       jsr lcd_instruction
000015r 1  A9 06          lda #%00000110 ; Increment and shift cursor; don't shift display
000017r 1  20 rr rr       jsr lcd_instruction
00001Ar 1  A9 01          lda #%00000001 ; Clear display
00001Cr 1  20 rr rr       jsr lcd_instruction
00001Fr 1                 ; presumes we will continue executing into 'print'
00001Fr 1               
00001Fr 1               print:
00001Fr 1               ;Description
00001Fr 1               ;  Prints the message to the LCD charater by character
00001Fr 1               ;Arguments
00001Fr 1               ;  None
00001Fr 1               ;Preconditions
00001Fr 1               ;  Expected to be called from reset
00001Fr 1               ;  symbol 'message' exists as null terminated string
00001Fr 1               ;Side Effects
00001Fr 1               ;  * a character from message, indexed w/ x
00001Fr 1               ;  * if we find the null at the end of message jump to the nop loop
00001Fr 1               ;  * the character is printed to the lcd
00001Fr 1               ;  * x is incremented
00001Fr 1               ;Note
00001Fr 1               ;  The macro is overengineering, but I am using this to play with macros. "I'm learnding!"
00001Fr 1  A2 00          ldx #0
000021r 1               print_loop:
000021r 1  BD rr rr       lda message,x
000024r 1  F0 0C          beq loop
000026r 1  CE rr rr 20    lcd_print_char_macro ;macro to print character, defined in lcd.s_imports.
00002Ar 1  rr rr 9C rr  
00002Er 1  rr           
00002Fr 1  E8             inx
000030r 1  80 EF          bra print_loop ;jmp
000032r 1               
000032r 1               loop:
000032r 1               ;Description
000032r 1               ;  Loops on nop.
000032r 1               ;Arguments
000032r 1               ;  None
000032r 1               ;Preconditions
000032r 1               ;  Does nothing
000032r 1               ;Side Effects
000032r 1  EA             nop
000033r 1  80 FD          bra loop ;jmp
000035r 1               
000035r 1  4A 61 63 6B  message: .asciiz "Jackie is cute!"
000039r 1  69 65 20 69  
00003Dr 1  73 20 63 75  
000044r 1               
